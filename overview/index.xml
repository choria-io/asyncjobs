<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Overviews on Choria Async Jobs Documentation</title><link>https://choria-io.github.io/asyncjobs/overview/</link><description>Recent content in Overviews on Choria Async Jobs Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://choria-io.github.io/asyncjobs/overview/index.xml" rel="self" type="application/rss+xml"/><item><title>Golang Walkthrough</title><link>https://choria-io.github.io/asyncjobs/overview/golang-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/overview/golang-overview/</guid><description>This is a basic walkthrough of publishing Tasks and handling Tasks in Go. A more thorough guide will be written in time.
This is an introductory guide, we have extensive Go reference documentation.
This guide is known to work with Release 0.0.4
Connecting to JetStream A connection to a JetStream server is needed, you can either prepare a connecting yourself or pass in the name of a NATS Context
NATS have a plethora of connection methods, security approaches, TLS or non TLS and even supports Websockets - you can configure it any way you wish.</description></item><item><title>CLI Walkthrough</title><link>https://choria-io.github.io/asyncjobs/overview/cli-overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/overview/cli-overview/</guid><description>This is a basic walkthrough of publishing Tasks and handling them using the CLI.
This is essentially the CLI version of Introductory Golang Walkthrough.
This guide is known to work with Release 0.0.4
We have a similar video walkthrough that discuss the CLI and related topics.
Requirements You&amp;rsquo;ll need the NATS CLI, an optional JetStream Server and the Async Jobs CLI,
$ go install github.com/choria-io/asyncjobs/ajc@v0.0.4 JetStream If you have an existing JetStream server add a context to connect to it:</description></item><item><title>Scheduled Tasks</title><link>https://choria-io.github.io/asyncjobs/overview/scheduled-tasks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/overview/scheduled-tasks/</guid><description>The Task Scheduler allows you to create cron like entries that will create Tasks on demand.
This requires a separate process to be run that will supervise the configured schedules and create the tasks. We have such a Scheduler built into the ajc binary deployable in any container manager.
The scheduler we provide support being deployed in a highly-available cluster, they will perform leader election with one of the cluster scheduling tasks.</description></item><item><title>Handlers in Docker</title><link>https://choria-io.github.io/asyncjobs/overview/handlers-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/overview/handlers-docker/</guid><description>We want to make it really easy to run handler services in Docker, toword that version 0.0.4 introduces a packager that can create containers on your behalf.
Preparing Handlers Go Based The idea is that you would create a Handler per Go package, the packager will then pull in all the configured handlers into a small microservice.
package handler import ( aj &amp;#34;github.com/choria-io/asyncjobs&amp;#34; ) func AsyncJobHandler(ctx context.Context, log aj.</description></item><item><title>Handlers in K8s</title><link>https://choria-io.github.io/asyncjobs/overview/handlers-k8s/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/overview/handlers-k8s/</guid><description>We publish Helm charts to deploy the system to Kubernetes.
Requirements NATS Server with JetStream You need a NATS JetStream server, if you are a Choria User you can enable Choria Streams otherwise the NATS Community has their own NATS Helm Charts.
Connection Context We use NATS Contexts to configure the connection between asyncjobs and NATS. If you already have a context configured using the NATS CLI then use nats context show CONTEXTNAME --json to get the keys and values to configure.</description></item><item><title>Feature List</title><link>https://choria-io.github.io/asyncjobs/overview/features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/overview/features/</guid><description>This feature list is incomplete, at present the focus is on determining what will work well for the particular patterns JetStream enables, so there might be some churn in the feature set here.
Tasks Task definitions stored post-processing, with various retention and discard policies Ability to retry a Task that has already been completed or failed Task deduplication Deadline per task - after this time the task will not be processed Tasks can depend on other tasks Max tries per task, capped to the queue tries Task state tracked throughout it&amp;rsquo;s lifecycle K-Sortable Task GUIDs Lifecycle events published about changes to task states See Task Lifecycle for full background and details</description></item></channel></rss>