<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>References on Choria Async Jobs Documentation</title><link>https://choria-io.github.io/asyncjobs/reference/</link><description>Recent content in References on Choria Async Jobs Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://choria-io.github.io/asyncjobs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Tasks lifecycle</title><link>https://choria-io.github.io/asyncjobs/reference/task-lifecycle/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/reference/task-lifecycle/</guid><description>A task is the basic item of work that is scheduled and processed by a Handler.
Task Storage Tasks are stored in NATS JetStream in a Stream called CHORIA_AJ_TASKS. Every Task is stored in a subject keyed by it&amp;rsquo;s ID CHORIA_AJ.T.&amp;lt;TASK ID&amp;gt;. Tasks must have unique IDs.
Task storage defaults to being File based and non replicated with no limits on the number of Tasks or how long they are retained.</description></item><item><title>Routing, Concurrency, Retry</title><link>https://choria-io.github.io/asyncjobs/reference/routing-concurrency-retry/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/reference/routing-concurrency-retry/</guid><description>Processing Tasks is what it&amp;rsquo;s all about, so, this is an important topic to explore and understand. It is quite simple in the general case but there are some nuances to be aware of.
Handlers are how Tasks get executed, typically this is code you provide written in Go.
For a non Go solution see Remote Request Reply Handlers, but reading this page is still good for a grounding understanding since remote Handlers map exactly onto the same concepts.</description></item><item><title>Request-Reply Handlers</title><link>https://choria-io.github.io/asyncjobs/reference/request-reply/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/reference/request-reply/</guid><description>Typically, and for best performance, you implement your handlers in Go and compile them into the binary.
In order to support other programming languages we also support calling out over NATS in a Request-Reply fashion to a service that can be programmed in any language.
It&amp;rsquo;s worth understanding Routing, Handlers, Concurrency and Retry for background, these remote callout Handlers map exactly onto that model.
Registering with the Router client, _ := asyncjobs.</description></item><item><title>Lifecycle Events</title><link>https://choria-io.github.io/asyncjobs/reference/lifecycle-events/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/reference/lifecycle-events/</guid><description>Lifecycle events are small JSON messages that are published to notify about various stages of processing and the life of a client.
Today the only event we support is one notifying about changes in Task State but more will be added. In future we will support emitting Cloud Event standard events.
Events are not guaranteed to be delivered and are not persisted, they are informational. While you can use them to build a kind of coupled system of waiting for a task to complete you should not rely on these events to be delivered in 100% of cases.</description></item><item><title>Terminology</title><link>https://choria-io.github.io/asyncjobs/reference/terminology/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://choria-io.github.io/asyncjobs/reference/terminology/</guid><description>Several terms are used in this system as outlined here.
JetStream The underlying storage and work queue manager. See the NATS project documentation for background.
Work Queue A Work Queue is JetStream Stream set with WorkQueue Retention policy. The underlying Stream holding these queues are called CHORIA_AJ_Q_DEFAULT for the DEFAULT queue.
Work Item Work Items are placed in the Work Queue and scheduled by JetStream. The contents of the Work Queue are ProcessItem messages encoded in JSON format.</description></item></channel></rss>